using System;
using System.Collections;
using System.Collections.Generic;
using System.Data.Common;
using HN.Code.Networking;
using Unity.Services.Authentication;
using Unity.Services.Core;
using Unity.Services.Lobbies;
using Unity.Services.Lobbies.Models;
using UnityEngine;

public class LobbyManager : MonoBehaviour
{
    public static LobbyManager Instance { get; private set; } //??????? ????? ???? ????

    public const string KEY_PLAYER_NAME = "PlayerName"; //?¡À???? ??? KEY
    public const string KEY_PLAYER_CAR = "Car"; //?¡À???? ????? KEY

    private string _playerName; //?¡À???? ????? ????? ????
    private PlayerCartType _playerCartType; //????? ????? ????????

    [field: SerializeField] public CurrentPlayerData thisPlayerDataCompo;

    /// <summary>
    /// EventHandler?? ??????? Void?? ??????????? ???N?????. ?????? ?????? ??????? ?????? ???????????? ???? ????????
    /// ????????? ????? ???? object sender, EventArgs e?? ???? sender?? ?????? ?????????? ???,EventArgs ??????? ???? ???? 
    /// </summary>
    public event EventHandler OnLeftLobby; //???? ?????? ?????? ????? ??????????.

    public event EventHandler<LobbyEventArgs>
        OnJoinedLobby; //?¥ê? ????? ??????? ???? LobbyEventArgs?? Lobby ?????? ??????????.

    public event EventHandler<LobbyEventArgs>
        OnLobbyUpdated; //?¥ê? ?????????? ??????? ???? LobbyEventArgs?? Lobby ?????? ??????????.

    public event EventHandler<LobbyEventArgs>
        OnKickedFromLobby; //?¥ê?? ??????? ??????? ???? LobbyEventArgs?? Lobby ?????? ??????????.

    public event EventHandler<OnLobbyListChangedEventArgs>
        OnLobbyListChanged; //?¥ê???? ??? ??????? ???? OnLobbyListChangedEventArgs LobbyList?????? ??????????.

    public class LobbyEventArgs : EventArgs //?¥ê? ?????? ????? ?????
    {
        public Lobby lobby; //???? ??? ?¥ê? ??????????.
    }

    public class OnLobbyListChangedEventArgs : EventArgs //?¥ê? ??????? ??? ?¥ê? ????? ?????? ????? ?????
    {
        public List<Lobby> lobbyList = new List<Lobby>(); //?¥ê? ??????? ??????????.
    }

    private float
        heartbeatTimer =
            2.5f; //Unity Lobby?? 30????? ????????????? ?????????? ????????? ????? ??????? ???? ???????????? ????? ????(?????? ???)

    private float lobbyPollTimer = 2.5f; //?¥ê? ?????? ??????? ??? ????? ????? ????(??? ?¡À????)
    private float refreshLobbyListTimer = 5f; //?¥ê? ?????©¤?©£?

    private Lobby joinedLobby; //??? ????? ?¥ê? ????? ????

    private void Awake()
    {
        //?????
        if (Instance == null) Instance = this;
        else
        {
            Destroy(gameObject);
            return;
        }

        _playerName = "Player_" + UnityEngine.Random.Range(1000, 9999);
        Authenticate(_playerName); //?¡À???? ?????? ?¥á????? ????
    }

    private void Start()
    {
        InitializePlayerName();
    }

    private void Update()
    {
        HandleLobbyHeartbeat(); //?¥ê? ????? ??????? ???
        HandleLobbyPolling(); //?¥ê? ?????? ???????????? ???
        //HandleRefreshLobbyList();
    }

    #region Authentication

    public async void Authenticate(string playerName)
    {
        _playerName = playerName; //?¡À???? ????? ??????.


        var options = new InitializationOptions().SetProfile(playerName); //?????????

        await UnityServices.InitializeAsync(options); //??????? ???? 

        await AuthenticationService.Instance.SignInAnonymouslyAsync(); //??? ?¥á???
    }

    #endregion

    public async void InitializePlayerName()
    {
        await thisPlayerDataCompo.SetPlayerData(_playerName);
    }

    #region Lobby Heartbeat & Polling

    private async void HandleLobbyHeartbeat()
    {
        if (IsLobbyHost()) //?¥ê? ???????
        {
            heartbeatTimer -= Time.deltaTime; //?¥ê? ??? ???? ???? ????
            if (heartbeatTimer < 0f) //????? 0???? ??????
            {
                heartbeatTimer = 15f; //???? ????

                try
                {
                    await LobbyService.Instance
                        .SendHeartbeatPingAsync(joinedLobby.Id); //?¥ê?? ?¥ê? ????????? ?????? ?¥ê? ??????¢¥?.
                    Debug.Log("Heartbeat sent");
                }
                catch (Exception e)
                {
                    Debug.LogError("Heartbeat failed: " + e);
                }
            }
        }
    }

    private async void HandleLobbyPolling()
    {
        if (joinedLobby != null) //?¥ê? ????????
        {
            lobbyPollTimer -= Time.deltaTime; //?¥ê? ????????? ???? ???? ????
            if (lobbyPollTimer < 0f) //????? 0??????????
            {
                lobbyPollTimer = 1.1f; //???? ????

                try
                {
                    joinedLobby = await LobbyService.Instance.GetLobbyAsync(joinedLobby.Id); //?¥ê? ?????? ??????.

                    OnLobbyUpdated?.Invoke(this,
                        new LobbyEventArgs { lobby = joinedLobby }); //?¥ê? ????????? ?????? ?????? ???????.

                    if (!IsPlayerInLobby()) //?¡À???? ?¥ê? ???????????(????????)
                    {
                        Debug.Log("Kicked from Lobby!");
                        OnKickedFromLobby?.Invoke(this,
                            new LobbyEventArgs { lobby = joinedLobby }); //???? ???????? ?????? ???????.
                        joinedLobby = null; //????? ?¥ê????? ??????.
                    }
                }
                catch (LobbyServiceException e)
                {
                    Debug.LogWarning("Lobby polling failed: " + e);
                    joinedLobby = null;
                }
            }
        }
    }

    #endregion

    #region Lobby Management

    public Lobby GetJoinedLobby() => joinedLobby; //??? ?????????? ?¥ê? ??????? ?????? ???

    public bool IsLobbyHost() //?¥ê? ?????? ?¢¥??? ?????? ???
    {
        return joinedLobby != null &&
               joinedLobby.HostId ==
               AuthenticationService.Instance
                   .PlayerId; //???? ?¥ê? ????ID?? ?¡À???? ID?? ???????????? ???? false?????? true?? ???????.
    }

    private bool IsPlayerInLobby() //?¡À???? ?¥ê? ????????? ?????? ????
    {
        if (joinedLobby == null) return false; //?¥ê?????? false?? ???????.

        foreach (Player player in joinedLobby.Players) //?¥ê???? ?¡À???? ?????? ????
        {
            if (player.Id == AuthenticationService.Instance.PlayerId) //???? ?¡À????ID?? ?????? ??????
                return true; //?????? true?? ???????.
        }

        return false; //????? false?? ???????.
    }

    private Player GetPlayer(string playerName = null, string selectedCart = "") //?¡À???? ??????? ?????? ???
    {
        try
        {
            if (string.IsNullOrEmpty(playerName)) //?¡À???? ????? ?????
                playerName = _playerName; //???? ????? ??????.

            return new Player(
                AuthenticationService.Instance.PlayerId, //???? ?¥á????? ?¡À?????? ???? ID?? ??????
                null, //???????? 
                new Dictionary<string, PlayerDataObject> //¨¨???? ?¡À???? ??????
                {
                    {
                        KEY_PLAYER_NAME, new PlayerDataObject(PlayerDataObject.VisibilityOptions.Public, playerName)
                    }, //?¡À???? KEY??????? ????? KEY?????? ??? ?¡À???? ??????? ????????? ???????¥ï? ??????? ??????.(?¡À???? ????? ??????? ?????? ???? ???????)
                    {
                        KEY_PLAYER_CAR, new PlayerDataObject(PlayerDataObject.VisibilityOptions.Public, selectedCart)
                    } //?¡À???? ????? KEY??????? ????? KEY?????? ??? ?¡À???? ??????? ????????? ???????¥ï? ??????? ??????.
                }
            );
        }
        catch (Exception e)
        {
            Debug.LogError("Failed to get player data: " + e);
            return null;
        }
    }


    public async void
        CreateLobby(string lobbyName, int maxPlayers) //?¥ê? ???? ?????? ??? ?¥ê?????? ??? ?¡À???? ????????? ??¢¥?.
    {
        if (UnityServices.State !=
            ServicesInitializationState
                .Initialized) //????? ?????? ???? ????????????? ?¥ê? ??????????? ?????? ???? ?????????????.
        {
            Debug.LogError("Unity Services not initialized. Cannot create lobby.");
            return;
        }

        if (!AuthenticationService.Instance
                .IsSignedIn) //?????????? ?¥á??¥î???? ???????? ???? ?¥á??? ??????????? ?????? ???? ?¥ê? ????????? ?????.
        {
            Debug.LogError("Not signed in. Cannot create lobby.");
            return;
        }

        try
        {
            var options = new CreateLobbyOptions //?¥ê? ???? ??????
            {
                Player = GetPlayer(thisPlayerDataCompo.GivePlayerData().UserName,
                    thisPlayerDataCompo.GivePlayerData().CarType), //?????? ???
                IsPrivate = false, //???????????¢¥?.
            };

            joinedLobby =
                await LobbyService.Instance.CreateLobbyAsync(lobbyName, maxPlayers,
                    options); //?¥ê? ???? ?? ????? ??????? ?¥ê??? ??????.

            OnJoinedLobby?.Invoke(this,
                new LobbyEventArgs { lobby = joinedLobby }); //?¥ê? ?????? ?????? ???????? ?¥ê? ?????? ??????.

            Debug.Log("Lobby Created: " + joinedLobby.Name);
        }
        catch (LobbyServiceException e)
        {
            Debug.LogError("CreateLobby failed: " + e);
        }
        catch (Exception e)
        {
            Debug.LogError("CreateLobby failed: " + e);
        }
    }

    public async void RefreshLobbyList() //?¥ê? ?????©¤
    {
        if (UnityServices.State !=
            ServicesInitializationState
                .Initialized) //????? ?????? ???? ????????????? ?¥ê? ??????????? ?????? ???? ?????©¤???????????.
        {
            Debug.LogWarning("Unity Services not initialized yet. Cannot refresh lobby list.");
            return;
        }

        if (!AuthenticationService.Instance
                .IsSignedIn) //?????????? ?¥á??¥î???? ???????? ???? ?¥á??? ??????????? ?????? ???? ?????©¤????????? ?????.
        {
            Debug.LogWarning("Not signed in. Cannot refresh lobby list.");
            return;
        }

        try
        {
            var options = new QueryLobbiesOptions //Unity Lobby???? ?¥ê? ????? ?? ?????? ??????? ??? ?????.
            {
                Count = 25, //???¥ê?
                Filters = new List<QueryFilter>
                {
                    //????? ??? ?¥ê? ???????????? ????
                    new QueryFilter(
                        field: QueryFilter.FieldOptions.AvailableSlots,
                        op: QueryFilter.OpOptions.GT,
                        value: "0"
                    )
                },
                Order = new List<QueryOrder> //????
                {
                    //???? ???? ?????? ?¥ê??? ????
                    new QueryOrder(
                        asc: false,
                        field: QueryOrder.FieldOptions.Created
                    )
                }
            };

            QueryResponse response = await LobbyService.Instance.QueryLobbiesAsync(options); //????? ?¢¥? ?¥ê? ????????

            var validLobbies = new List<Lobby>(); //???????? ?¥ê????? ????
            foreach (var lobby in response.Results) //????? ????? ??????? ??????.
            {
                if (!lobby.IsLocked && !string.IsNullOrEmpty(lobby.HostId)) //?¥ê? ????????? ?????????????? ?¥ê?? ???????.
                {
                    validLobbies.Add(lobby); //???????? ???????? ??????.
                }
            }

            OnLobbyListChanged?.Invoke(this, new OnLobbyListChangedEventArgs
            {
                lobbyList = validLobbies
            }); //?¥ê? ????? ?????? ???????.

            Debug.Log($"Lobby List Refreshed: {validLobbies.Count}/{response.Results.Count} (after filtering)");
        }
        catch (LobbyServiceException e)
        {
            Debug.LogError("RefreshLobbyList failed: " + e);
        }
        catch (Exception e)
        {
            Debug.LogError("RefreshLobbyList failed: " + e);
        }
    }


    public async void JoinLobby(Lobby lobby) //?¥ê? ????? ?????? ???
    {
        if (UnityServices.State !=
            ServicesInitializationState
                .Initialized) //????? ?????? ???? ????????????? ?¥ê? ??????????? ?????? ???? ????????????????????.
        {
            Debug.LogError("Unity Services not initialized. Cannot join lobby.");
            return;
        }

        if (!AuthenticationService.Instance
                .IsSignedIn) //?????????? ?¥á??¥î???? ???????? ???? ?¥á??? ??????????? ?????? ???? ??????????? ?????.
        {
            Debug.LogError("Not signed in. Cannot join lobby.");
            return;
        }

        try
        {
            joinedLobby = await LobbyService.Instance.JoinLobbyByIdAsync(lobby.Id,
                new JoinLobbyByIdOptions //?¥ê????????? ????? ?????? ?????? ????????? ???? ????
                {
                    Player = GetPlayer(thisPlayerDataCompo.GivePlayerData().UserName,
                        thisPlayerDataCompo.GivePlayerData().CarType)
                });

            OnJoinedLobby?.Invoke(this,
                new LobbyEventArgs { lobby = joinedLobby }); //?¥ê? ?????? ?????? ??????? ?¥ê??????? ???????.

            Debug.Log("Joined Lobby: " + joinedLobby.Name);
        }
        catch (LobbyServiceException e)
        {
            Debug.LogError("JoinLobby failed: " + e);
        }
        catch (Exception e)
        {
            Debug.LogError("JoinLobby failed: " + e);
        }
    }

    public async void KickPlayer(string playerId) //?¡À???? ????? ?? ?????? ??? 
    {
        if (!IsLobbyHost()) return; //?????? ????? ??? ??????? ???
        if (joinedLobby == null) return; //?¥ê? ????? ??? ????????? ???

        try
        {
            await LobbyService.Instance.RemovePlayerAsync(joinedLobby.Id, playerId); //?¥ê?? ?¡À???? ????
            Debug.Log($"Kicked player: {playerId}");
        }
        catch (LobbyServiceException e)
        {
            Debug.LogError("KickPlayer failed: " + e);
        }
    }

    public async void LeaveLobby() //?¥ê? ?????? ?????? ???
    {
        if (joinedLobby == null) return; //?¥ê? ??????????? ???

        try
        {
            await LobbyService.Instance.RemovePlayerAsync(joinedLobby.Id,
                AuthenticationService.Instance.PlayerId); //?¥ê?? ???????? ????????? ???? ??? ??? ????

            Debug.Log("Left Lobby: " + joinedLobby.Name);

            joinedLobby = null; //?????? ?¥ê? ???? ?¥ê?? ????
            OnLeftLobby?.Invoke(this, EventArgs.Empty); //?¥ê? ???? ???? ????
        }
        catch (LobbyServiceException e)
        {
            Debug.LogError("LeaveLobby failed: " + e);
        }
    }

    public async void StartGame()
    {
        if (!IsLobbyHost() || joinedLobby == null) return;

        try
        {
            bool result = await HostSingleton.Instance.GameManager.MakeJoinCode(GetJoinedLobby().Players.Count);
            
            if (result == false)
            {
                Debug.LogError("Âü°¡ ÄÚµå »ý¼º ½ÇÆÐ");
                return;
            }
            print($"JoinCode: {HostSingleton.Instance.JoinCode}");

            var updateOptions = new UpdateLobbyOptions
            {
                Data = new Dictionary<string, DataObject>
                {
                    { "GameStarted", new DataObject(DataObject.VisibilityOptions.Public, "true") },
                    { "JoinCode", new DataObject(DataObject.VisibilityOptions.Public, HostSingleton.Instance.JoinCode) }
                }
            };

            joinedLobby = await LobbyService.Instance.UpdateLobbyAsync(joinedLobby.Id, updateOptions);

            Debug.Log("Game started! Signal sent to all players.");
        }
        catch (LobbyServiceException e)
        {
            Debug.LogError("StartGame failed: " + e);
        }
    }

    #endregion

    #region Helpers

    private void HandleRefreshLobbyList()
    {
        if (UnityServices.State == ServicesInitializationState.Initialized &&
            AuthenticationService.Instance.IsSignedIn)
        {
            refreshLobbyListTimer -= Time.deltaTime;
            if (refreshLobbyListTimer < 0f)
            {
                refreshLobbyListTimer = 5f;
                RefreshLobbyList();
            }
        }
    }

    public bool IsServiceReady()
    {
        try
        {
            return UnityServices.State == ServicesInitializationState.Initialized &&
                   AuthenticationService.Instance.IsSignedIn;
        }
        catch
        {
            return false;
        }
    }

    #endregion
}